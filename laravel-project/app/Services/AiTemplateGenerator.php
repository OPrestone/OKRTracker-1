<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class AiTemplateGenerator
{
    protected $apiKey;
    
    public function __construct()
    {
        $this->apiKey = env('OPENAI_API_KEY');
        
        if (!$this->apiKey) {
            throw new \Exception('OpenAI API key is not configured.');
        }
    }
    
    /**
     * Generate an OKR template based on the provided description and department
     *
     * @param string $description The description of the goal or objective
     * @param string $department The department for which to generate the template
     * @param string $level The level of the OKR (company, department, team, individual)
     * @return array The generated template data
     */
    public function generateTemplate(string $description, string $department, string $level = 'team'): array
    {
        try {
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post('https://api.openai.com/v1/chat/completions', [
                'model' => 'gpt-4o', // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
                'messages' => [
                    [
                        'role' => 'system',
                        'content' => $this->getSystemPrompt()
                    ],
                    [
                        'role' => 'user',
                        'content' => "Generate an OKR template for the {$department} department with the following goal or description: '{$description}'. The OKR level is: {$level}."
                    ]
                ],
                'temperature' => 0.7,
                'response_format' => [ 'type' => 'json_object' ],
            ]);
            
            if ($response->failed()) {
                Log::error('OpenAI API error', [
                    'status' => $response->status(),
                    'body' => $response->body(),
                ]);
                
                throw new \Exception('Failed to generate OKR template: ' . $response->body());
            }
            
            $data = $response->json();
            
            if (!isset($data['choices'][0]['message']['content'])) {
                throw new \Exception('Invalid response format from OpenAI API');
            }
            
            $content = $data['choices'][0]['message']['content'];
            $templateData = json_decode($content, true);
            
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new \Exception('Failed to parse JSON response from OpenAI API');
            }
            
            return $this->formatTemplateData($templateData);
            
        } catch (\Exception $e) {
            Log::error('Error generating OKR template', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);
            
            throw $e;
        }
    }
    
    /**
     * Format the template data to match the expected structure
     *
     * @param array $aiGeneratedData The data generated by the AI
     * @return array The formatted template data
     */
    protected function formatTemplateData(array $aiGeneratedData): array
    {
        // Ensure we have the basic structure
        if (!isset($aiGeneratedData['template_data']) && isset($aiGeneratedData['objective'])) {
            $aiGeneratedData = [
                'template_data' => $aiGeneratedData
            ];
        }
        
        // Ensure name is set
        if (!isset($aiGeneratedData['name']) && isset($aiGeneratedData['template_data']['objective']['title'])) {
            $aiGeneratedData['name'] = $aiGeneratedData['template_data']['objective']['title'];
        }
        
        // Ensure description is set
        if (!isset($aiGeneratedData['description'])) {
            $aiGeneratedData['description'] = 'AI-generated OKR template';
        }
        
        // Ensure required fields are set in template_data
        if (!isset($aiGeneratedData['template_data']['objective']['status'])) {
            $aiGeneratedData['template_data']['objective']['status'] = 'not_started';
        }
        
        if (!isset($aiGeneratedData['template_data']['objective']['progress'])) {
            $aiGeneratedData['template_data']['objective']['progress'] = 0;
        }
        
        // Ensure key results have required fields
        if (isset($aiGeneratedData['template_data']['key_results']) && is_array($aiGeneratedData['template_data']['key_results'])) {
            foreach ($aiGeneratedData['template_data']['key_results'] as &$kr) {
                if (!isset($kr['status'])) {
                    $kr['status'] = 'not_started';
                }
                
                if (!isset($kr['progress'])) {
                    $kr['progress'] = 0;
                }
            }
        }
        
        // Ensure initiatives have required fields
        if (isset($aiGeneratedData['template_data']['initiatives']) && is_array($aiGeneratedData['template_data']['initiatives'])) {
            foreach ($aiGeneratedData['template_data']['initiatives'] as &$initiative) {
                if (!isset($initiative['status'])) {
                    $initiative['status'] = 'not_started';
                }
                
                if (!isset($initiative['completed'])) {
                    $initiative['completed'] = false;
                }
            }
        }
        
        return $aiGeneratedData;
    }
    
    /**
     * Get the system prompt for the OpenAI API
     *
     * @return string The system prompt
     */
    protected function getSystemPrompt(): string
    {
        return <<<EOT
You are an expert OKR (Objectives and Key Results) consultant who helps organizations create effective OKRs. 
Your task is to generate OKR templates based on the user's description and department.

An OKR template should have:
1. An objective (a clear, inspiring goal)
2. 3-5 key results (measurable outcomes that indicate progress toward the objective)
3. 2-5 initiatives (specific actions or projects to achieve the key results)

Guidelines:
- Objectives should be ambitious but achievable
- Key results must be measurable and quantifiable with specific targets
- Initiatives should be concrete actions
- Use [X] as placeholder for specific numeric targets that would be filled in later

OUTPUT FORMAT:
You must output valid JSON in the following format:
{
  "name": "Template Name",
  "description": "Brief description of this template",
  "category": "Business Function",
  "department": "Department Name",
  "template_data": {
    "objective": {
      "title": "The objective statement",
      "description": "More details about the objective",
      "level": "team|department|company|individual"
    },
    "key_results": [
      {
        "title": "Key Result 1 with [X] as target placeholder",
        "description": "Details about this key result"
      },
      {
        "title": "Key Result 2 with [X] as target placeholder",
        "description": "Details about this key result"
      }
    ],
    "initiatives": [
      {
        "title": "Initiative 1",
        "description": "Action to achieve the key results"
      },
      {
        "title": "Initiative 2",
        "description": "Action to achieve the key results"
      }
    ]
  }
}
EOT;
    }
}